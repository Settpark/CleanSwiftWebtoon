//
//  WebtoonHomeRecommandationViewController.swift
//  CleanWebtoon
//
//  Created by temp_name on 2023/08/16.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WebtoonHomeRecommandationDisplayLogic: AnyObject {
    func displayRecommandationWebtoons(viewModels: [WebtoonHomeRecommandation.RecommandationWebtoonModel.ViewModel])
}

class WebtoonHomeRecommandationViewController: UIViewController, WebtoonHomeRecommandationDisplayLogic {
    var interactor: WebtoonHomeRecommandationBusinessLogic?
    var router: (NSObjectProtocol & WebtoonHomeRecommandationRoutingLogic & WebtoonHomeRecommandationDataPassing)?
    
    private var recommnadWebtoons: [UIImageView]
    private lazy var webtoonTitleCollectionView: UICollectionView = {
        let collectionView: UICollectionView = UICollectionView(frame: .zero, collectionViewLayout: setupCollectionView())
        collectionView.bounces = false
        collectionView.backgroundColor = .white
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        recommnadWebtoons = []
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
        setupViews()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = WebtoonHomeRecommandationInteractor()
        let presenter = WebtoonHomeRecommandationPresenter()
        let router = WebtoonHomeRecommandationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupViews() {
        view.translatesAutoresizingMaskIntoConstraints = false
    }
    
    private func setupCollectionView() -> UICollectionViewCompositionalLayout {
        let item = NSCollectionLayoutItem(layoutSize: NSCollectionLayoutSize(widthDimension: .fractionalWidth(1),
                                                                             heightDimension: .absolute(45)))
        item.contentInsets = NSDirectionalEdgeInsets(top: 0, leading: 5, bottom: 0, trailing: 5)
        item.edgeSpacing = NSCollectionLayoutEdgeSpacing(leading: nil,
                                                         top: .flexible(135),
                                                         trailing: nil,
                                                         bottom: nil)
        let groupSize: NSCollectionLayoutSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(0.9),
                                                                       heightDimension: .absolute(180))
        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])
        let section = NSCollectionLayoutSection(group: group)
        section.orthogonalScrollingBehavior = .groupPagingCentered
        return UICollectionViewCompositionalLayout(section: section)
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchRecommandationWebtoon()
    }
    
    // MARK: Do something
    
    func fetchRecommandationWebtoon() {
        let request = WebtoonHomeRecommandation.RecommandationWebtoonModel.Request(page: 0,
                                                                                   perPage: 10,
                                                                                   service: .kakao,
                                                                                   updateDay: .mon)
        interactor?.fetchRecommandationWebtoons(request: request)
    }
    
    func displayRecommandationWebtoons(viewModels: [WebtoonHomeRecommandation.RecommandationWebtoonModel.ViewModel]) {
        //TODO: 추천 웹툰 상단 표시, DataSoruce 선언 및 업데이트
    }
}

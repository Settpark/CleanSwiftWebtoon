//
//  HomeTabViewController.swift
//  CleanWebtoon
//
//  Created by temp_name on 2023/07/27.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WebtoonHomeDisplayLogic: AnyObject {
    func displayWebtoons(viewModels: [WebtoonHomeModels.WebtoonModels.ViewModel])
}

class WebtoonHomeViewController: UIViewController, WebtoonHomeDisplayLogic {
    var interactor: WebtoonHomeBusinessLogic?
    var router: (NSObjectProtocol & WebtoonHomeRoutingLogic & WebtoonHomeDataPassing)?
    
    private let recommandSectionViewController: WebtoonHomeRecommandationViewController
    
    private let webtoonListViewController: WebtoonListParentViewController
    private var webtoonCollectionDataSource: UICollectionViewDiffableDataSource<WebtoonHomeModels.WebtoonHomeTabSection, UIView>!
    private lazy var webtoonCollectionView: UICollectionView = {
        let collectionView: UICollectionView = UICollectionView(frame: .zero, collectionViewLayout: setupCollectionViewLayout())
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.bounces = false
        collectionView.backgroundColor = .clear
        return collectionView
    }()
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        recommandSectionViewController = .init()
        webtoonListViewController = .init(today: Date.makeUpdateDayToInt(Date.makeTodayWeekday()))
        webtoonCollectionDataSource = nil
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
        setupViews()
        setupDataSource()
        setupChildViewController()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
        
    private func setup() {
        let viewController = self
        let interactor = WebtoonHomeInteractor(errorHandler: self)
        let presenter = WebtoonHomePresenter()
        let router = WebtoonHomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupViews() {
        self.view.backgroundColor = .white
        title = "웹툰"
        tabBarItem = UITabBarItem(title: "웹툰", image: UIImage(systemName: "house"), selectedImage: UIImage(systemName: "house.fill"))
        
        self.view.addSubview(recommandSectionViewController.view)
        recommandSectionViewController.didMove(toParent: self)
        recommandSectionViewController.view.translatesAutoresizingMaskIntoConstraints = false
        addChild(recommandSectionViewController)
        
        self.view.addSubview(webtoonCollectionView)
        
        NSLayoutConstraint.activate([
            recommandSectionViewController.view.leadingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leadingAnchor),
            recommandSectionViewController.view.trailingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.trailingAnchor),
            recommandSectionViewController.view.topAnchor.constraint(equalTo: self.view.topAnchor),
            recommandSectionViewController.view.heightAnchor.constraint(equalToConstant: 185),
            
            webtoonCollectionView.leadingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leadingAnchor),
            webtoonCollectionView.trailingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.trailingAnchor),
            webtoonCollectionView.topAnchor.constraint(equalTo: recommandSectionViewController.view.bottomAnchor),
            webtoonCollectionView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor)
        ])
    }
    
    private func setupDataSource() {
        let cellConfiguration = UICollectionView.CellRegistration<WebtoonSectionCell, UIView> { cell, indexPath, itemIdentifier in
            cell.configureCell(contentView: itemIdentifier)
        }
        webtoonCollectionDataSource = UICollectionViewDiffableDataSource(collectionView: webtoonCollectionView,
                                                                         cellProvider: { collectionView, indexPath, itemIdentifier in
            return collectionView.dequeueConfiguredReusableCell(using: cellConfiguration, for: indexPath, item: itemIdentifier)
        })
    }
    
    private func setupChildViewController() {
        webtoonListViewController.setListener(self)
        addChild(webtoonListViewController)
        webtoonListViewController.didMove(toParent: self)
    }
    
    private func setupCollectionViewLayout() -> UICollectionViewLayout {
        let layout = UICollectionViewCompositionalLayout { (sectionProvider, configuration) -> NSCollectionLayoutSection? in
            let sectionKind = WebtoonHomeModels.WebtoonHomeTabSection(rawValue: sectionProvider)
            guard let sectionKind = sectionKind else {
                return nil
            }
            var section: NSCollectionLayoutSection?
            if sectionKind == .recommand {
                section = HirarchyCreater.createRecommandGroup()
            } else if sectionKind == .week {
                section = HirarchyCreater.createWeekSection()
            } else if sectionKind == .webtoonList {
                section = HirarchyCreater.createWebtoonListGroup()
            }
            return section
        }
        return layout
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchTodayWebtoonWhenAppStarted()
        fetchRecommandWebtoonsWhenAppStarted()
    }
    
    func fetchTodayWebtoonWhenAppStarted() {
        let request = WebtoonHomeModels.WebtoonModels.Request(page: 0,
                                                              perPage: Int(Int16.max),
                                                              service: ServiceCase.naver.rawValue,
                                                              updateDay: Date.makeTodayWeekday())
        interactor?.fetchWebtoons(request: request)
    }
    
    func fetchRecommandWebtoonsWhenAppStarted() {
        
    }
    
    func displayWebtoons(viewModels: [WebtoonHomeModels.WebtoonModels.ViewModel]) {
        webtoonListViewController.updateCollectionView(data: viewModels)
    }
}

extension WebtoonHomeViewController: WebtoonHomeServiceErrorHandler {
    func errorHandling(error: Error) {
        //TODO: Show Alert Controller
    }
}

extension WebtoonHomeViewController: PageChangeEventListener {
    func setupView(_ view: UIView) {
        var snapShot = NSDiffableDataSourceSnapshot<WebtoonHomeModels.WebtoonHomeTabSection,
                                                    UIView>()
        snapShot.appendSections([.recommand, .week, .webtoonList])
        snapShot.appendItems([view])
        webtoonCollectionDataSource.apply(snapShot)
    }
    
    func pageChange(page: Int) {
        
    }
    
    func sendCurrentCollectionView(_ collectionView: UICollectionView) {
    }
}

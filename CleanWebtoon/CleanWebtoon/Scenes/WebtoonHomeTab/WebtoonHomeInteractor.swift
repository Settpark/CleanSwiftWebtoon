//
//  WebtoonHomeInteractor.swift
//  CleanWebtoon
//
//  Created by temp_name on 2023/06/21.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

protocol WebtoonHomeBusinessLogic {
    func fetchSpecificDayWebtoons(option: WebtoonHome.WebtoonList.Request, isButtonPress: Bool)
    func updateCurrent(updateDay: UpdateDay)
    func fetchRecommandWebtoons()
}

protocol WebtoonHomeDataStore {
    //var name: String { get set }
}

class WebtoonHomeInteractor: WebtoonHomeBusinessLogic, WebtoonHomeDataStore {
    
    var presenter: WebtoonHomePresentationLogic?
    private var worker: WebtoonHomeWorker
    private var lastUpdateDay: UpdateDay?
    
    private let coreDataManager: CoreDataManager
    private let dispatchGroup: DispatchGroup
    private let webtoonFetchQueue: DispatchQueue
    private lazy var checkLastUpdate: DispatchWorkItem = DispatchWorkItem(qos: .background, block: {
        self.dispatchGroup.enter()
        
        
    })
    
    init() {
        worker = WebtoonHomeWorker(service: WebtoonsAPI())
        lastUpdateDay = nil
        coreDataManager = CoreDataManager(persistentContainerName: "WebtoonCacheModel")
        dispatchGroup = DispatchGroup()
        webtoonFetchQueue = DispatchQueue(label: "webtoonFetcher")
    }
    
    func fetchSpecificDayWebtoons(option: WebtoonHome.WebtoonList.Request, isButtonPress: Bool) {
        self.worker.isAlreadyFetch { [weak self] in
            if $0 {
                //TODO: 에러 메시지 뜸. 이유 확인.
                self?.coreDataManager.fetchData(type: WebtoonEntity.self,
                                                predicate: [option.updateDay])
            } else {
                //TODO: 에러 메시지 뜸. 이유 확인.
                self?.fetchWebtoons(option: option, isButtonPress: isButtonPress)
            }
        }
    }
    
    func fetchWebtoons(option: WebtoonHome.WebtoonList.Request, isButtonPress: Bool) {
        if lastUpdateDay == option.updateDay {
            return
        }
        lastUpdateDay = option.updateDay
        worker.fetchSpecificDayWebtoons(updateDay: option.updateDay) { [weak self] response in
            guard let self = self else {
                return
            }
            self.presenter?.presentWebtoonList(response: response, updateDay: option.updateDay)
        }
        if isButtonPress {
            moveToSpecificdayWebtoonlist(updateday: option.updateDay)
        }
    }
    
    func updateCurrent(updateDay: UpdateDay) {
        self.lastUpdateDay = updateDay
    }
    
    func fetchRecommandWebtoons() {
        worker.fetchRecommandWebtoons { [weak self] response in
            guard let self = self else {
                return
            }
            self.presenter?.presentRecommandWebtoons(response: response)
        }
    }
    
    private func moveToSpecificdayWebtoonlist(updateday: UpdateDay) {
        let updateDayToInt: CGFloat = UpdateDay.makeUpdatedayToInt(updateDay: updateday)
        presenter?.presentSpecificDayWebtoons(offset: updateDayToInt)
    }
}

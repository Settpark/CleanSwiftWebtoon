//
//  WebtoonHomeViewController.swift
//  CleanWebtoon
//
//  Created by temp_name on 2023/06/21.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WebtoonHomeDisplayLogic: AnyObject {
    func displayWebtoonList(viewModels: [WebtoonHome.WebtoonList.ViewModel], updateDay: UpdateDay)
    func displayRecommandWebtoon(viewModels: [WebtoonHome.WebtoonList.ViewModel])
    func setupTodayWebtoonlist(offset: CGFloat)
}

class WebtoonHomeViewController: UIViewController, WebtoonHomeDisplayLogic {
    
    var interactor: WebtoonHomeBusinessLogic?
    var router: (NSObjectProtocol & WebtoonHomeRoutingLogic & WebtoonHomeDataPassing)?
    
    private let mainScrollView: UIScrollView
    private let mainScrollStackView: UIStackView
    private let topEventScrollView: UIScrollView
    
    private let weekDayScrollView: UIScrollView
    private let weekDayStackView: UIStackView
    
    private let everydayPlusButton: UIButton
    private let mondayButton: UIButton
    private let tuesdayButton: UIButton
    private let wednesdayButton: UIButton
    private let thursdayButton: UIButton
    private let fridayButton: UIButton
    private let saturdayButton: UIButton
    private let sundayButton: UIButton
    private let finishButton: UIButton
    
    private let webtoonListScrollView: UIScrollView
    private let webtoonListStackView: UIStackView
    private let everyDayPlusWebtoonCollection: UICollectionView
    private let mondayWebtoonCollection: UICollectionView
    private let tuesdayWebtoonCollection: UICollectionView
    private let wednesdayWebtoonCollection: UICollectionView
    private let thursdayWebtoonCollection: UICollectionView
    private let fridayWebtoonCollection: UICollectionView
    private let saturdayWebtoonCollection: UICollectionView
    private let sundayWebtoonCollection: UICollectionView
    private let finishWebtoonCollection: UICollectionView
    
    private let webtoonListLayout: WebtoonListLayout
    private let everyDayPlusWebtoonDataSource: WebtoonListDataSource
    private let mondayWebtoonDataSource: WebtoonListDataSource
    private let tuesdayWebtoonDataSource: WebtoonListDataSource
    private let wednesdayWebtoonDataSource: WebtoonListDataSource
    private let thursdayWebtoonDataSource: WebtoonListDataSource
    private let fridayWebtoonDataSource: WebtoonListDataSource
    private let saturdayWebtoonDataSource: WebtoonListDataSource
    private let sundayWebtoonDataSource: WebtoonListDataSource
    private let finishWebtoonDataSource: WebtoonListDataSource
    
    private let scrollDelegate: ScrollDelegate
    private let topEventStackView: UIStackView
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        mainScrollView = {
            let scrollView = UIScrollView()
            scrollView.translatesAutoresizingMaskIntoConstraints = false
            scrollView.bounces = false
            return scrollView
        }()
        mainScrollStackView = {
            let stackView = UIStackView()
            stackView.translatesAutoresizingMaskIntoConstraints = false
            stackView.axis = .vertical
            stackView.distribution = .equalSpacing
            stackView.spacing = 10
            return stackView
        }()
        topEventScrollView = {
            let scrollView = UIScrollView()
            scrollView.translatesAutoresizingMaskIntoConstraints = false
            scrollView.isPagingEnabled = true
            return scrollView
        }()
        topEventStackView = {
            let stackView = UIStackView()
            stackView.translatesAutoresizingMaskIntoConstraints = false
            stackView.axis = .horizontal
            return stackView
        }()
        weekDayScrollView = {
            let scrollView = UIScrollView()
            scrollView.translatesAutoresizingMaskIntoConstraints = false
            return scrollView
        }()
        weekDayStackView = {
            let stackView = UIStackView()
            stackView.translatesAutoresizingMaskIntoConstraints = false
            stackView.axis = .horizontal
            return stackView
        }()
        everydayPlusButton = {
            let button = UIButton()
            button.translatesAutoresizingMaskIntoConstraints = false
            button.setTitle("매일+", for: .normal)
            button.titleLabel?.font = .systemFont(ofSize: 13)
            button.setTitleColor(.black, for: .normal)
            return button
        }()
        mondayButton = {
            let button = UIButton()
            button.translatesAutoresizingMaskIntoConstraints = false
            button.setTitle("월", for: .normal)
            button.titleLabel?.font = .systemFont(ofSize: 13)
            button.setTitleColor(.black, for: .normal)
            return button
        }()
        tuesdayButton = {
            let button = UIButton()
            button.translatesAutoresizingMaskIntoConstraints = false
            button.setTitle("화", for: .normal)
            button.titleLabel?.font = .systemFont(ofSize: 13)
            button.setTitleColor(.black, for: .normal)
            return button
        }()
        wednesdayButton = {
            let button = UIButton()
            button.translatesAutoresizingMaskIntoConstraints = false
            button.setTitle("수", for: .normal)
            button.titleLabel?.font = .systemFont(ofSize: 13)
            button.setTitleColor(.black, for: .normal)
            return button
        }()
        thursdayButton = {
            let button = UIButton()
            button.translatesAutoresizingMaskIntoConstraints = false
            button.setTitle("목", for: .normal)
            button.titleLabel?.font = .systemFont(ofSize: 13)
            button.setTitleColor(.black, for: .normal)
            return button
        }()
        fridayButton = {
            let button = UIButton()
            button.translatesAutoresizingMaskIntoConstraints = false
            button.setTitle("금", for: .normal)
            button.titleLabel?.font = .systemFont(ofSize: 13)
            button.setTitleColor(.black, for: .normal)
            return button
        }()
        saturdayButton = {
            let button = UIButton()
            button.translatesAutoresizingMaskIntoConstraints = false
            button.setTitle("토", for: .normal)
            button.titleLabel?.font = .systemFont(ofSize: 13)
            button.setTitleColor(.black, for: .normal)
            return button
        }()
        sundayButton = {
            let button = UIButton()
            button.translatesAutoresizingMaskIntoConstraints = false
            button.setTitle("일", for: .normal)
            button.titleLabel?.font = .systemFont(ofSize: 13)
            button.setTitleColor(.black, for: .normal)
            return button
        }()
        finishButton = {
            let button = UIButton()
            button.translatesAutoresizingMaskIntoConstraints = false
            button.setTitle("완결", for: .normal)
            button.titleLabel?.font = .systemFont(ofSize: 13)
            button.setTitleColor(.black, for: .normal)
            return button
        }()
        webtoonListScrollView = {
            let scrollView = UIScrollView()
            scrollView.translatesAutoresizingMaskIntoConstraints = false
            scrollView.isPagingEnabled = true
            return scrollView
        }()
        webtoonListStackView = {
            let stackView = UIStackView()
            stackView.translatesAutoresizingMaskIntoConstraints = false
            stackView.axis = .horizontal
            return stackView
        }()
        everyDayPlusWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        mondayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        tuesdayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        wednesdayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        thursdayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        fridayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        saturdayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        sundayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        finishWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        webtoonListLayout = WebtoonListLayout(inset: 20)
        everyDayPlusWebtoonDataSource = WebtoonListDataSource()
        mondayWebtoonDataSource = WebtoonListDataSource()
        tuesdayWebtoonDataSource = WebtoonListDataSource()
        wednesdayWebtoonDataSource = WebtoonListDataSource()
        thursdayWebtoonDataSource = WebtoonListDataSource()
        fridayWebtoonDataSource = WebtoonListDataSource()
        saturdayWebtoonDataSource = WebtoonListDataSource()
        sundayWebtoonDataSource = WebtoonListDataSource()
        finishWebtoonDataSource = WebtoonListDataSource()
        
        scrollDelegate = ScrollDelegate(outerScrollView: self.mainScrollView)
        
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
        setupViews()
        setupDataSource()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = WebtoonHomeInteractor()
        let presenter = WebtoonHomePresenter()
        let router = WebtoonHomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchTodayWebtoon()
        setupButtonFeature()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        self.applyTopEventGradient()
    }
    
    private func setupViews() {
        title = "웹툰"
        tabBarItem = UITabBarItem(title: "웹툰", image: UIImage(systemName: "house"), selectedImage: UIImage(systemName: "house.fill"))
        view.backgroundColor = .white
        
        view.addSubview(mainScrollView)
        mainScrollView.addSubview(mainScrollStackView)
        mainScrollStackView.addArrangedSubview(topEventScrollView)
        
        topEventScrollView.addSubview(topEventStackView)
        
        mainScrollStackView.addArrangedSubview(weekDayScrollView)
        weekDayScrollView.addSubview(weekDayStackView)
        weekDayStackView.addArrangedSubview(everydayPlusButton)
        weekDayStackView.addArrangedSubview(mondayButton)
        weekDayStackView.addArrangedSubview(tuesdayButton)
        weekDayStackView.addArrangedSubview(wednesdayButton)
        weekDayStackView.addArrangedSubview(thursdayButton)
        weekDayStackView.addArrangedSubview(fridayButton)
        weekDayStackView.addArrangedSubview(saturdayButton)
        weekDayStackView.addArrangedSubview(sundayButton)
        weekDayStackView.addArrangedSubview(finishButton)
        
        mainScrollStackView.addArrangedSubview(webtoonListScrollView)
        webtoonListScrollView.addSubview(webtoonListStackView)
        
        let everyDayPlusStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            stackView.translatesAutoresizingMaskIntoConstraints = false
            return stackView
        }()
        let mondayStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            stackView.translatesAutoresizingMaskIntoConstraints = false
            return stackView
        }()
        let tuesdayStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            stackView.translatesAutoresizingMaskIntoConstraints = false
            return stackView
        }()
        let wednesdayStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            stackView.translatesAutoresizingMaskIntoConstraints = false
            return stackView
        }()
        let thursdayStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            stackView.translatesAutoresizingMaskIntoConstraints = false
            return stackView
        }()
        let fridayStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            stackView.translatesAutoresizingMaskIntoConstraints = false
            return stackView
        }()
        let saturdayStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            stackView.translatesAutoresizingMaskIntoConstraints = false
            return stackView
        }()
        let sundayStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            stackView.translatesAutoresizingMaskIntoConstraints = false
            return stackView
        }()
        let finishStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            stackView.translatesAutoresizingMaskIntoConstraints = false
            return stackView
        }()
        
        webtoonListStackView.addArrangedSubview(everyDayPlusStackView)
        everyDayPlusStackView.addArrangedSubview(everyDayPlusWebtoonCollection)
        webtoonListStackView.addArrangedSubview(mondayStackView)
        mondayStackView.addArrangedSubview(mondayWebtoonCollection)
        webtoonListStackView.addArrangedSubview(tuesdayStackView)
        tuesdayStackView.addArrangedSubview(tuesdayWebtoonCollection)
        webtoonListStackView.addArrangedSubview(wednesdayStackView)
        wednesdayStackView.addArrangedSubview(wednesdayWebtoonCollection)
        webtoonListStackView.addArrangedSubview(thursdayStackView)
        thursdayStackView.addArrangedSubview(thursdayWebtoonCollection)
        webtoonListStackView.addArrangedSubview(fridayStackView)
        fridayStackView.addArrangedSubview(fridayWebtoonCollection)
        webtoonListStackView.addArrangedSubview(saturdayStackView)
        saturdayStackView.addArrangedSubview(saturdayWebtoonCollection)
        webtoonListStackView.addArrangedSubview(sundayStackView)
        sundayStackView.addArrangedSubview(sundayWebtoonCollection)
        webtoonListStackView.addArrangedSubview(finishStackView)
        finishStackView.addArrangedSubview(finishWebtoonCollection)
        
        NSLayoutConstraint.activate([
            mainScrollView.topAnchor.constraint(equalTo: view.topAnchor),
            mainScrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            mainScrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            mainScrollView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            
            mainScrollStackView.topAnchor.constraint(equalTo: mainScrollView.contentLayoutGuide.topAnchor),
            mainScrollStackView.leadingAnchor.constraint(equalTo: mainScrollView.contentLayoutGuide.leadingAnchor),
            mainScrollStackView.trailingAnchor.constraint(equalTo: mainScrollView.contentLayoutGuide.trailingAnchor),
            mainScrollStackView.bottomAnchor.constraint(equalTo: mainScrollView.contentLayoutGuide.bottomAnchor),
            mainScrollStackView.widthAnchor.constraint(equalTo: mainScrollView.frameLayoutGuide.widthAnchor),
            
            topEventStackView.topAnchor.constraint(equalTo: topEventScrollView.contentLayoutGuide.topAnchor),
            topEventStackView.leadingAnchor.constraint(equalTo: topEventScrollView.contentLayoutGuide.leadingAnchor),
            topEventStackView.trailingAnchor.constraint(equalTo: topEventScrollView.contentLayoutGuide.trailingAnchor),
            topEventStackView.bottomAnchor.constraint(equalTo: topEventScrollView.contentLayoutGuide.bottomAnchor),
            topEventStackView.heightAnchor.constraint(equalTo: topEventScrollView.frameLayoutGuide.heightAnchor),
            
            weekDayScrollView.heightAnchor.constraint(equalToConstant: 50),
            weekDayScrollView.leadingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leadingAnchor),
            weekDayScrollView.trailingAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.trailingAnchor),
            
            weekDayStackView.leadingAnchor.constraint(equalTo: weekDayScrollView.contentLayoutGuide.leadingAnchor),
            weekDayStackView.trailingAnchor.constraint(equalTo: weekDayScrollView.contentLayoutGuide.trailingAnchor),
            weekDayStackView.topAnchor.constraint(equalTo: weekDayScrollView.contentLayoutGuide.topAnchor),
            weekDayStackView.bottomAnchor.constraint(equalTo: weekDayScrollView.contentLayoutGuide.bottomAnchor),
            weekDayStackView.heightAnchor.constraint(equalTo: weekDayScrollView.frameLayoutGuide.heightAnchor),
            
            everydayPlusButton.widthAnchor.constraint(equalToConstant: 50),
            everydayPlusButton.heightAnchor.constraint(equalToConstant: 50),
            mondayButton.widthAnchor.constraint(equalToConstant: 50),
            mondayButton.heightAnchor.constraint(equalToConstant: 50),
            tuesdayButton.widthAnchor.constraint(equalToConstant: 50),
            tuesdayButton.heightAnchor.constraint(equalToConstant: 50),
            wednesdayButton.widthAnchor.constraint(equalToConstant: 50),
            wednesdayButton.heightAnchor.constraint(equalToConstant: 50),
            thursdayButton.widthAnchor.constraint(equalToConstant: 50),
            thursdayButton.heightAnchor.constraint(equalToConstant: 50),
            fridayButton.widthAnchor.constraint(equalToConstant: 50),
            fridayButton.heightAnchor.constraint(equalToConstant: 50),
            saturdayButton.widthAnchor.constraint(equalToConstant: 50),
            saturdayButton.heightAnchor.constraint(equalToConstant: 50),
            sundayButton.widthAnchor.constraint(equalToConstant: 50),
            sundayButton.heightAnchor.constraint(equalToConstant: 50),
            finishButton.widthAnchor.constraint(equalToConstant: 50),
            finishButton.heightAnchor.constraint(equalToConstant: 50),
            
            webtoonListStackView.leadingAnchor.constraint(equalTo: webtoonListScrollView.contentLayoutGuide.leadingAnchor),
            webtoonListStackView.trailingAnchor.constraint(equalTo: webtoonListScrollView.contentLayoutGuide.trailingAnchor),
            webtoonListStackView.topAnchor.constraint(equalTo: webtoonListScrollView.contentLayoutGuide.topAnchor),
            webtoonListStackView.bottomAnchor.constraint(equalTo: webtoonListScrollView.contentLayoutGuide.bottomAnchor),
            webtoonListStackView.heightAnchor.constraint(equalTo: webtoonListScrollView.frameLayoutGuide.heightAnchor),
            
            everyDayPlusWebtoonCollection.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor),
            everyDayPlusWebtoonCollection.heightAnchor.constraint(equalToConstant: 10000), //MARK: 로드 된 후 재 지정 필요. StackView라면?
            mondayWebtoonCollection.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor),
            tuesdayWebtoonCollection.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor),
            wednesdayWebtoonCollection.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor),
            thursdayWebtoonCollection.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor),
            fridayWebtoonCollection.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor),
            saturdayWebtoonCollection.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor),
            sundayWebtoonCollection.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor),
            finishWebtoonCollection.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor)
        ])
    }
    
    private func setupDataSource() {
        everyDayPlusWebtoonCollection.delegate = webtoonListLayout
        everyDayPlusWebtoonCollection.dataSource = everyDayPlusWebtoonDataSource
        everyDayPlusWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        mondayWebtoonCollection.delegate = webtoonListLayout
        mondayWebtoonCollection.dataSource = mondayWebtoonDataSource
        mondayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        tuesdayWebtoonCollection.delegate = webtoonListLayout
        tuesdayWebtoonCollection.dataSource = tuesdayWebtoonDataSource
        tuesdayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        wednesdayWebtoonCollection.delegate = webtoonListLayout
        wednesdayWebtoonCollection.dataSource = wednesdayWebtoonDataSource
        wednesdayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        thursdayWebtoonCollection.delegate = webtoonListLayout
        thursdayWebtoonCollection.dataSource = thursdayWebtoonDataSource
        thursdayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        fridayWebtoonCollection.delegate = webtoonListLayout
        fridayWebtoonCollection.dataSource = fridayWebtoonDataSource
        fridayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        saturdayWebtoonCollection.delegate = webtoonListLayout
        saturdayWebtoonCollection.dataSource = saturdayWebtoonDataSource
        saturdayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        sundayWebtoonCollection.delegate = webtoonListLayout
        sundayWebtoonCollection.dataSource = sundayWebtoonDataSource
        sundayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        finishWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        finishWebtoonCollection.delegate = webtoonListLayout
        finishWebtoonCollection.dataSource = finishWebtoonDataSource
    }
    
    private func setupMainStackViewSpacing() {
        mainScrollStackView.setCustomSpacing(5, after: topEventScrollView)
    }
    
    func setupTodayWebtoonlist(offset: CGFloat) {
        let scrollOffset = offset * self.view.frame.width
        DispatchQueue.main.async {
            self.webtoonListScrollView.setContentOffset(CGPoint(x: scrollOffset, y: 0), animated: true)
        }
    }
    
    private func setupButtonFeature() {
        self.everydayPlusButton.addTarget(self, action: #selector(moveToSpecificDay(sender: )), for: .touchUpInside)
        self.mondayButton.addTarget(self, action: #selector(moveToSpecificDay(sender: )), for: .touchUpInside)
        self.tuesdayButton.addTarget(self, action: #selector(moveToSpecificDay(sender: )), for: .touchUpInside)
        self.wednesdayButton.addTarget(self, action: #selector(moveToSpecificDay(sender: )), for: .touchUpInside)
        self.thursdayButton.addTarget(self, action: #selector(moveToSpecificDay(sender: )), for: .touchUpInside)
        self.fridayButton.addTarget(self, action: #selector(moveToSpecificDay(sender: )), for: .touchUpInside)
        self.saturdayButton.addTarget(self, action: #selector(moveToSpecificDay(sender: )), for: .touchUpInside)
        self.sundayButton.addTarget(self, action: #selector(moveToSpecificDay(sender: )), for: .touchUpInside)
        self.finishButton.addTarget(self, action: #selector(moveToSpecificDay(sender: )), for: .touchUpInside)
    }
    
    @objc
    private func moveToSpecificDay(sender: UIButton) {
        var request = WebtoonHome.WebtoonList.Request(page: 0,
                                                      perPage: Int(Int16.max),
                                                      service: .kakao,
                                                      updateDay: nil)
        switch sender {
        case everydayPlusButton:
            interactor?.moveToSpecificdayWebtoonlist(updateday: .naverDaily)
            request.updateDay = .naverDaily
            break
        case mondayButton:
            interactor?.moveToSpecificdayWebtoonlist(updateday: .mon)
            request.updateDay = .mon
            break
        case tuesdayButton:
            interactor?.moveToSpecificdayWebtoonlist(updateday: .tue)
            request.updateDay = .tue
            break
        case wednesdayButton:
            interactor?.moveToSpecificdayWebtoonlist(updateday: .wed)
            request.updateDay = .wed
            break
        case thursdayButton:
            interactor?.moveToSpecificdayWebtoonlist(updateday: .thu)
            request.updateDay = .thu
            break
        case fridayButton:
            interactor?.moveToSpecificdayWebtoonlist(updateday: .fri)
            request.updateDay = .fri
            break
        case saturdayButton:
            interactor?.moveToSpecificdayWebtoonlist(updateday: .sat)
            request.updateDay = .sat
            break
        case sundayButton:
            interactor?.moveToSpecificdayWebtoonlist(updateday: .sun)
            request.updateDay = .sun
            break
        case finishButton:
            interactor?.moveToSpecificdayWebtoonlist(updateday: .finished)
            request.updateDay = .finished
        default:
            break
        }
        interactor?.fetchSpecificDayWebtoons(option: request)
    }
    
    func fetchTodayWebtoon() {
        let request = WebtoonHome.WebtoonList.Request(page: 0,
                                                      perPage: 65536,
                                                      service: .kakao,
                                                      updateDay: nil)
        interactor?.fetchSpecificDayWebtoons(option: request)
        interactor?.fetchRecommandWebtoons()
        interactor?.moveToSpecificdayWebtoonlist(updateday: nil)
    }
    
    func displayRecommandWebtoon(viewModels: [WebtoonHome.WebtoonList.ViewModel]) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            self.insertRecommandView(models: viewModels)
        }
    }
    
    private func applyTopEventGradient() {
        topEventStackView.subviews.forEach {
            let gradient: CAGradientLayer = .makeGreenGradient()
            gradient.frame = $0.bounds
            $0.layer.insertSublayer(gradient, at: 0)
        }
    }
    
    private func insertRecommandView(models: [WebtoonHome.WebtoonList.ViewModel]) {
        topEventStackView.subviews.forEach { $0.removeFromSuperview() }
        models.forEach { model in
            let frameView = {
                let view = UIView()
                view.translatesAutoresizingMaskIntoConstraints = false
                view.backgroundColor = .green
                view.layer.borderWidth = 3
                view.layer.borderColor = UIColor.white.cgColor
                return view
            }()
            topEventStackView.addArrangedSubview(frameView)
            NSLayoutConstraint.activate([frameView.widthAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.widthAnchor),
                                         frameView.heightAnchor.constraint(equalToConstant: 200)])
            UIImage.loadImage(from: model.img) { image in
                DispatchQueue.main.async {
                    guard let image = image else { return }
                    let resizedImage = UIImage.resizeImage(image: image, newSize: CGSize(width: 200, height: 200))
                    let imageView = {
                        let imageView = UIImageView(image: resizedImage)
                        imageView.translatesAutoresizingMaskIntoConstraints = false
                        return imageView
                    }()
                    frameView.addSubview(imageView)
                    let title: UILabel = {
                        let label = UILabel()
                        label.translatesAutoresizingMaskIntoConstraints = false
                        label.text = model.title
                        label.font = .makeCrisisKRFont(size: 25)
                        label.textColor = .white
                        return label
                    }()
                    frameView.addSubview(title)
                    NSLayoutConstraint.activate([imageView.leadingAnchor.constraint(equalTo: frameView.leadingAnchor, constant: 20),
                                                 imageView.centerYAnchor.constraint(equalTo: frameView.centerYAnchor),
                                                 title.trailingAnchor.constraint(equalTo: frameView.trailingAnchor, constant: -30),
                                                 title.bottomAnchor.constraint(equalTo: frameView.bottomAnchor, constant: -10)])
                }
            }?.resume()
        }
    }
    
    func displayWebtoonList(viewModels: [WebtoonHome.WebtoonList.ViewModel], updateDay: UpdateDay) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            switch updateDay {
            case .finished:
                self.finishWebtoonDataSource.update(dataSource: viewModels)
                self.finishWebtoonCollection.reloadData()
            case .naverDaily:
                self.everyDayPlusWebtoonDataSource.update(dataSource: viewModels)
                self.everyDayPlusWebtoonCollection.reloadData()
            case .mon:
                self.mondayWebtoonDataSource.update(dataSource: viewModels)
                self.mondayWebtoonCollection.reloadData()
            case .tue:
                self.tuesdayWebtoonDataSource.update(dataSource: viewModels)
                self.tuesdayWebtoonCollection.reloadData()
            case .wed:
                self.wednesdayWebtoonDataSource.update(dataSource: viewModels)
                self.wednesdayWebtoonCollection.reloadData()
            case .thu:
                self.thursdayWebtoonDataSource.update(dataSource: viewModels)
                self.thursdayWebtoonCollection.reloadData()
            case .fri:
                self.fridayWebtoonDataSource.update(dataSource: viewModels)
                self.fridayWebtoonCollection.reloadData()
            case .sat:
                self.saturdayWebtoonDataSource.update(dataSource: viewModels)
                self.saturdayWebtoonCollection.reloadData()
            case .sun:
                self.sundayWebtoonDataSource.update(dataSource: viewModels)
                self.sundayWebtoonCollection.reloadData()
            }
        }
    }
}

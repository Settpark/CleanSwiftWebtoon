//
//  WebtoonHomeViewController.swift
//  CleanWebtoon
//
//  Created by temp_name on 2023/06/21.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WebtoonHomeDisplayLogic: AnyObject
{
    func displayWebtoonList(viewModels: [WebtoonHome.WebtoonList.ViewModel], updateDay: UpdateDay)
}

class WebtoonHomeViewController: UIViewController, WebtoonHomeDisplayLogic {
    var interactor: WebtoonHomeBusinessLogic?
    var router: (NSObjectProtocol & WebtoonHomeRoutingLogic & WebtoonHomeDataPassing)?
    
    private let mainScrollView: UIScrollView
    private let mainScrollStackView: UIStackView
    private let topEventScrollView: UIScrollView
    private let webtoonListScrollView: UIScrollView
    private let webtoonListStackView: UIStackView
    private let everyDayPlusWebtoonCollection: UICollectionView
    private let mondayWebtoonCollection: UICollectionView
    private let tuesdayWebtoonCollection: UICollectionView
    private let wednesdayWebtoonCollection: UICollectionView
    private let thursdayWebtoonCollection: UICollectionView
    private let fridayWebtoonCollection: UICollectionView
    private let saturdayWebtoonCollection: UICollectionView
    private let sundayWebtoonCollection: UICollectionView
    
    private let webtoonListLayout: WebtoonListLayout
    private let everyDayPlusWebtoonDataSource: WebtoonListDataSource
    private let mondayWebtoonDataSource: WebtoonListDataSource
    private let tuesdayWebtoonDataSource: WebtoonListDataSource
    private let wednesdayWebtoonDataSource: WebtoonListDataSource
    private let thursdayWebtoonDataSource: WebtoonListDataSource
    private let fridayWebtoonDataSource: WebtoonListDataSource
    private let saturdayWebtoonDataSource: WebtoonListDataSource
    private let sundayWebtoonDataSource: WebtoonListDataSource
    
    private let scrollDelegate: ScrollDelegate
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        mainScrollView = {
            let scrollView = UIScrollView()
            scrollView.translatesAutoresizingMaskIntoConstraints = false
            scrollView.bounces = false
            return scrollView
        }()
        mainScrollStackView = {
            let stackView = UIStackView()
            stackView.translatesAutoresizingMaskIntoConstraints = false
            stackView.axis = .vertical
            return stackView
        }()
        topEventScrollView = {
            let scrollView = UIScrollView()
            scrollView.translatesAutoresizingMaskIntoConstraints = false
            scrollView.isPagingEnabled = true
            return scrollView
        }()
        webtoonListScrollView = {
            let scrollView = UIScrollView()
            scrollView.translatesAutoresizingMaskIntoConstraints = false
            scrollView.isPagingEnabled = true
            return scrollView
        }()
        webtoonListStackView = {
            let stackView = UIStackView()
            stackView.translatesAutoresizingMaskIntoConstraints = false
            stackView.axis = .horizontal
            return stackView
        }()
        everyDayPlusWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        mondayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        tuesdayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        wednesdayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        thursdayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        fridayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        saturdayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        sundayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.isUserInteractionEnabled = false
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        webtoonListLayout = WebtoonListLayout(inset: 20)
        everyDayPlusWebtoonDataSource = WebtoonListDataSource()
        mondayWebtoonDataSource = WebtoonListDataSource()
        tuesdayWebtoonDataSource = WebtoonListDataSource()
        wednesdayWebtoonDataSource = WebtoonListDataSource()
        thursdayWebtoonDataSource = WebtoonListDataSource()
        fridayWebtoonDataSource = WebtoonListDataSource()
        saturdayWebtoonDataSource = WebtoonListDataSource()
        sundayWebtoonDataSource = WebtoonListDataSource()
        
        scrollDelegate = ScrollDelegate(outerScrollView: self.mainScrollView)
        
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
        setupViews()
        setupDataSource()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = WebtoonHomeInteractor()
        let presenter = WebtoonHomePresenter()
        let router = WebtoonHomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchTodayWebtoon()
    }
    
    private func setupViews() {
        title = "웹툰"
        tabBarItem = UITabBarItem(title: "웹툰", image: UIImage(systemName: "house"), selectedImage: UIImage(systemName: "house.fill"))
        view.backgroundColor = .white
        
        view.addSubview(mainScrollView)
        mainScrollView.addSubview(mainScrollStackView)
        mainScrollStackView.addArrangedSubview(topEventScrollView)
        let topEventStackView: UIStackView = {
            let stackView: UIStackView = UIStackView()
            stackView.translatesAutoresizingMaskIntoConstraints = false
            stackView.axis = .horizontal
            return stackView
        }()
        let eventView1: UIView = {
            let view = UIView()
            view.translatesAutoresizingMaskIntoConstraints = false
            return view
        }()
        let eventView2: UIView = {
            let view = UIView()
            view.translatesAutoresizingMaskIntoConstraints = false
            return view
        }()
        topEventScrollView.addSubview(topEventStackView)
        topEventStackView.addArrangedSubview(eventView1)
        topEventStackView.addArrangedSubview(eventView2)
        
        mainScrollStackView.addArrangedSubview(webtoonListScrollView)
        webtoonListScrollView.addSubview(webtoonListStackView)
        
        let everyDayPlusStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            stackView.translatesAutoresizingMaskIntoConstraints = false
            return stackView
        }()
        
        let mondayStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            stackView.translatesAutoresizingMaskIntoConstraints = false
            return stackView
        }()
        
        webtoonListStackView.addArrangedSubview(everyDayPlusStackView)
        everyDayPlusStackView.addArrangedSubview(everyDayPlusWebtoonCollection)
        
        webtoonListStackView.addArrangedSubview(mondayStackView)
        mondayStackView.addArrangedSubview(mondayWebtoonCollection)
        
        NSLayoutConstraint.activate([
            mainScrollView.topAnchor.constraint(equalTo: view.topAnchor),
            mainScrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            mainScrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            mainScrollView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            
            mainScrollStackView.topAnchor.constraint(equalTo: mainScrollView.contentLayoutGuide.topAnchor),
            mainScrollStackView.leadingAnchor.constraint(equalTo: mainScrollView.contentLayoutGuide.leadingAnchor),
            mainScrollStackView.trailingAnchor.constraint(equalTo: mainScrollView.contentLayoutGuide.trailingAnchor),
            mainScrollStackView.bottomAnchor.constraint(equalTo: mainScrollView.contentLayoutGuide.bottomAnchor),
            mainScrollStackView.widthAnchor.constraint(equalTo: mainScrollView.frameLayoutGuide.widthAnchor),
            
            topEventStackView.topAnchor.constraint(equalTo: topEventScrollView.contentLayoutGuide.topAnchor),
            topEventStackView.leadingAnchor.constraint(equalTo: topEventScrollView.contentLayoutGuide.leadingAnchor),
            topEventStackView.trailingAnchor.constraint(equalTo: topEventScrollView.contentLayoutGuide.trailingAnchor),
            topEventStackView.bottomAnchor.constraint(equalTo: topEventScrollView.contentLayoutGuide.bottomAnchor),
            topEventStackView.heightAnchor.constraint(equalTo: topEventScrollView.frameLayoutGuide.heightAnchor),

            eventView1.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor),
            eventView1.heightAnchor.constraint(equalToConstant: 200),
            eventView2.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor),
            eventView2.heightAnchor.constraint(equalToConstant: 200),
            
            webtoonListStackView.leadingAnchor.constraint(equalTo: webtoonListScrollView.contentLayoutGuide.leadingAnchor),
            webtoonListStackView.trailingAnchor.constraint(equalTo: webtoonListScrollView.contentLayoutGuide.trailingAnchor),
            webtoonListStackView.topAnchor.constraint(equalTo: webtoonListScrollView.contentLayoutGuide.topAnchor),
            webtoonListStackView.bottomAnchor.constraint(equalTo: webtoonListScrollView.contentLayoutGuide.bottomAnchor),
            webtoonListStackView.heightAnchor.constraint(equalTo: webtoonListScrollView.frameLayoutGuide.heightAnchor),
            
            everyDayPlusWebtoonCollection.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor),
            everyDayPlusWebtoonCollection.heightAnchor.constraint(equalToConstant: 10000), //MARK: 로드 된 후 재 지정 필요. StackView라면?
            mondayWebtoonCollection.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor),
        ])
    }
    
    private func setupDataSource() {
        everyDayPlusWebtoonCollection.delegate = webtoonListLayout
        everyDayPlusWebtoonCollection.dataSource = everyDayPlusWebtoonDataSource
        everyDayPlusWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        mondayWebtoonCollection.delegate = webtoonListLayout
        mondayWebtoonCollection.dataSource = mondayWebtoonDataSource
        mondayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        tuesdayWebtoonCollection.delegate = webtoonListLayout
        tuesdayWebtoonCollection.dataSource = tuesdayWebtoonDataSource
        tuesdayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        wednesdayWebtoonCollection.delegate = webtoonListLayout
        wednesdayWebtoonCollection.dataSource = wednesdayWebtoonDataSource
        wednesdayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        thursdayWebtoonCollection.delegate = webtoonListLayout
        thursdayWebtoonCollection.dataSource = thursdayWebtoonDataSource
        thursdayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        fridayWebtoonCollection.delegate = webtoonListLayout
        fridayWebtoonCollection.dataSource = fridayWebtoonDataSource
        fridayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        saturdayWebtoonCollection.delegate = webtoonListLayout
        saturdayWebtoonCollection.dataSource = saturdayWebtoonDataSource
        saturdayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        sundayWebtoonCollection.delegate = webtoonListLayout
        sundayWebtoonCollection.dataSource = sundayWebtoonDataSource
        sundayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
    }
    
    private func setupMainStackViewSpacing() {
        mainScrollStackView.setCustomSpacing(5, after: topEventScrollView)
    }
    
    func fetchTodayWebtoon() {
        interactor?.fetchTodayWebtoons()
    }
    
    func displayWebtoonList(viewModels: [WebtoonHome.WebtoonList.ViewModel], updateDay: UpdateDay) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            self.everyDayPlusWebtoonDataSource.update(dataSource: viewModels)
            self.everyDayPlusWebtoonCollection.reloadData()
            self.mondayWebtoonDataSource.update(dataSource: viewModels)
            self.mondayWebtoonCollection.reloadData()
            switch updateDay {
            case .mon:
                self.mondayWebtoonDataSource.update(dataSource: viewModels)
                self.mondayWebtoonCollection.reloadData()
            case .tue:
                self.tuesdayWebtoonDataSource.update(dataSource: viewModels)
                self.tuesdayWebtoonCollection.reloadData()
            case .wed:
                self.wednesdayWebtoonDataSource.update(dataSource: viewModels)
                self.wednesdayWebtoonCollection.reloadData()
            case .thu:
                self.thursdayWebtoonDataSource.update(dataSource: viewModels)
                self.thursdayWebtoonCollection.reloadData()
            case .fri:
                self.fridayWebtoonDataSource.update(dataSource: viewModels)
                self.fridayWebtoonCollection.reloadData()
            case .sat:
                self.saturdayWebtoonDataSource.update(dataSource: viewModels)
                self.saturdayWebtoonCollection.reloadData()
            case .sun:
                self.sundayWebtoonDataSource.update(dataSource: viewModels)
                self.sundayWebtoonCollection.reloadData()
            case .naverDaily:
                self.everyDayPlusWebtoonDataSource.update(dataSource: viewModels)
                self.everyDayPlusWebtoonCollection.reloadData()
            }
        }
    }
}

//
//  WebtoonHomeViewController.swift
//  CleanWebtoon
//
//  Created by temp_name on 2023/06/21.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WebtoonHomeDisplayLogic: AnyObject
{
    func displayWebtoonList(viewModels: [WebtoonHome.WebtoonList.ViewModel])
}

class WebtoonHomeViewController: UIViewController, WebtoonHomeDisplayLogic {
    var interactor: WebtoonHomeBusinessLogic?
    var router: (NSObjectProtocol & WebtoonHomeRoutingLogic & WebtoonHomeDataPassing)?
    
    private let topEventScrollView: UIScrollView
    private let webtoonListScrollView: UIScrollView
    private let webtoonListStackView: UIStackView
    private let mondayWebtoonCollection: UICollectionView
    private let tuesdayWebtoonCollection: UICollectionView
    
    private let webtoonListLayout: WebtoonListLayout
    private let mondayDataSource: WebtoonListDataSource
    private let tuesdayDataSource: WebtoonListDataSource
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        topEventScrollView = {
            let scrollView = UIScrollView()
            scrollView.translatesAutoresizingMaskIntoConstraints = false
            return scrollView
        }()
        webtoonListScrollView = {
            let scrollView = UIScrollView()
            scrollView.translatesAutoresizingMaskIntoConstraints = false
            scrollView.isPagingEnabled = true
            return scrollView
        }()
        webtoonListStackView = {
            let stackView = UIStackView()
            stackView.translatesAutoresizingMaskIntoConstraints = false
            stackView.axis = .horizontal
            return stackView
        }()
        mondayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        tuesdayWebtoonCollection = {
            let layout = UICollectionViewFlowLayout()
            layout.sectionInset = UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 20)
            let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
            collectionView.translatesAutoresizingMaskIntoConstraints = false
            return collectionView
        }()
        
        webtoonListLayout = WebtoonListLayout(inset: 20)
        mondayDataSource = WebtoonListDataSource()
        tuesdayDataSource = WebtoonListDataSource()
        
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
        setupViews()
        setupDataSource()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = WebtoonHomeInteractor()
        let presenter = WebtoonHomePresenter()
        let router = WebtoonHomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchAllWebtoonCollection()
    }
    
    private func setupViews() {
        title = "웹툰"
        tabBarItem = UITabBarItem(title: "웹툰", image: UIImage(systemName: "house"), selectedImage: UIImage(systemName: "house.fill"))
        view.backgroundColor = .white
        
        view.addSubview(topEventScrollView)
        view.addSubview(webtoonListScrollView)
        webtoonListScrollView.addSubview(webtoonListStackView)
        
        let mondayStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            return stackView
        }()
        
        let tuesdayStackView: UIStackView = {
            let stackView = UIStackView()
            stackView.axis = .vertical
            return stackView
        }()
        
        webtoonListStackView.addArrangedSubview(mondayStackView)
        webtoonListStackView.addArrangedSubview(tuesdayStackView)
        mondayStackView.addArrangedSubview(mondayWebtoonCollection)
        tuesdayStackView.addArrangedSubview(tuesdayWebtoonCollection)
        
        NSLayoutConstraint.activate([
            topEventScrollView.topAnchor.constraint(equalTo: view.topAnchor),
            topEventScrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            topEventScrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            topEventScrollView.heightAnchor.constraint(equalToConstant: 150),
            
            webtoonListScrollView.topAnchor.constraint(equalTo: topEventScrollView.bottomAnchor, constant: 25),
            webtoonListScrollView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
            webtoonListScrollView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
            webtoonListScrollView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),
            
            webtoonListStackView.topAnchor.constraint(equalTo: webtoonListScrollView.contentLayoutGuide.topAnchor),
            webtoonListStackView.leadingAnchor.constraint(equalTo: webtoonListScrollView.contentLayoutGuide.leadingAnchor),
            webtoonListStackView.trailingAnchor.constraint(equalTo: webtoonListScrollView.contentLayoutGuide.trailingAnchor),
            webtoonListStackView.bottomAnchor.constraint(equalTo: webtoonListScrollView.contentLayoutGuide.bottomAnchor),
            webtoonListStackView.heightAnchor.constraint(equalTo: webtoonListScrollView.frameLayoutGuide.heightAnchor),
            
            mondayWebtoonCollection.widthAnchor.constraint(equalTo: self.view.widthAnchor),
            tuesdayWebtoonCollection.widthAnchor.constraint(equalTo: self.view.widthAnchor)
        ])
    }
    
    private func setupDataSource() {
        mondayWebtoonCollection.delegate = webtoonListLayout
        mondayWebtoonCollection.dataSource = mondayDataSource
        mondayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
        tuesdayWebtoonCollection.delegate = webtoonListLayout
        tuesdayWebtoonCollection.dataSource = mondayDataSource
        tuesdayWebtoonCollection.register(WebtoonListCell.self, forCellWithReuseIdentifier: WebtoonListCell.identifier)
    }
    
    func fetchAllWebtoonCollection() {
        interactor?.fetchWebtoons()
    }
    
    func displayWebtoonList(viewModels: [WebtoonHome.WebtoonList.ViewModel]) {
        DispatchQueue.main.async { [weak self] in
            self?.mondayDataSource.update(dataSource: viewModels)
            self?.mondayWebtoonCollection.reloadData()
            self?.tuesdayDataSource.update(dataSource: viewModels)
            self?.tuesdayWebtoonCollection.reloadData()
        }
    }
}

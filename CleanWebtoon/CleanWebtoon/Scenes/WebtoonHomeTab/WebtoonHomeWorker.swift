//
//  WebtoonHomeWorker.swift
//  CleanWebtoon
//
//  Created by temp_name on 2023/06/21.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ServiceLayer {
    func fetchSpecificDayWebtoons(request: WebtoonHome.WebtoonList.Request,
                                  completion: @escaping (Result<WebtoonHome.WebtoonList.Response, Error>) -> Void)
    func fetchRecommandWebtoons(completion: @escaping (Result<WebtoonHome.WebtoonList.Response, Error>) -> Void)
    func fetchLastUpdateTime(completion: @escaping (Result<WebtoonHome.LastUpdate, Error>) -> Void)
}

class WebtoonHomeWorker {
    
    private var service: ServiceLayer
    
    init(service: ServiceLayer) {
        self.service = service
    }
    
    func fetchSpecificDayWebtoons(request: WebtoonHome.WebtoonList.Request,
                                  completion: @escaping (WebtoonHome.WebtoonList.Response) -> Void)  {
        service.fetchSpecificDayWebtoons(request: request) { result in
            switch result {
            case .success(let success):
                completion(success)
            case .failure(let failure):
                print(failure)
            }
        }
    }
    
    func isAlreadyFetch(targetDate: UpdateDay,
                        completion: @escaping (Bool) -> Void) {
        service.fetchLastUpdateTime { result in
            switch result {
            case .success(let sucess):
                completion(Date.isAlreadyFetch(serverDate: sucess.lastUpdate, targetDate: targetDate))
            case .failure(_):
                completion(false)
            }
        }
    }
    
    func fetchRecommandWebtoons(completion: @escaping (WebtoonHome.WebtoonList.Response) -> Void) {
        service.fetchRecommandWebtoons { result in
            switch result {
            case .success(let success):
                completion(success)
            case .failure(let failure):
                print(failure)
            }
        }
    }
}
